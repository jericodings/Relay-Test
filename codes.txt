#[async_trait]
impl NostrEventStorage for Relay {
    async fn save_event(&self, event: &Value) -> Result<()> {
        let event_data = serde_json::to_string(event)?;
        let event_id = event["id"].as_str().ok_or_else(|| anyhow::Error::msg("Event ID is missing"))?;

        self.db.insert(event_id.as_bytes(), event_data.as_bytes())?;
        self.db.flush()?;
        Ok(())
    }


    use tokio::net::{TcpListener, TcpStream};
use tokio_tungstenite::{accept_async, tungstenite::protocol::Message};
use serde_json::Value;
use sled::Db;
use anyhow::{Result, Context};
use futures_util::stream::StreamExt;
use std::sync::Arc;
use tokio::sync::Mutex;
use futures_util::SinkExt;

#[tokio::main]
async fn main() -> Result<()> {
    let db = sled::open("nostr_relay_db")?;
    let db = Arc::new(Mutex::new(db));

    let listener = TcpListener::bind("127.0.0.1:8080").await?;
    println!("Relay server running on ws://127.0.0.1:8080");

    while let Ok((stream, _)) 
    = listener.accept().await {
        let db_clone = db.clone();
        tokio::spawn(async move {
            if let Err(e) = handle_connection(stream, db_clone).await {
                eprintln!("Error handling connection: {}", e);
            }
        });
    }

    Ok(())
}

async fn handle_connection(raw_stream: TcpStream, db: Arc<Mutex<Db>>) -> Result<()> {
    let ws_stream = accept_async(raw_stream).await.context("Failed to accept connection")?;
    let (mut write, mut read) = ws_stream.split();

    while let Some(message) = read.next().await {
        match message {
            Ok(msg) => {
                if msg.is_text() {
                    let text = msg.into_text()?;
                    if let Ok(event) = serde_json::from_str::<Value>(&text) {
                        if verify_event(&event) {
                            store_event(event, db.clone()).await?;
                            write.send(Message::text("Event stored successfully")).await?;
                        } else {
                            write.send(Message::text("Invalid event")).await?;
                        }
                    }
                }
            },
            Err(e) => {
                write.send(Message::text(format!("Error processing message: {}", e))).await?;
            }
        }
    }

    Ok(())
}

async fn store_event(event: Value, db: Arc<Mutex<Db>>) -> Result<()> {
    let event_id = event["id"].as_str().ok_or_else(|| anyhow::Error::msg("Event ID is missing"))?;
    let event_data = serde_json::to_string(&event)?;
    
    let db = db.lock().await;
    db.insert(event_id.as_bytes(), event_data.as_bytes())?;
    db.flush()?;
    Ok(())
}

fn verify_event(event: &Value) -> bool {
    // Here you would add logic to verify the event's signature and other criteria
    // This function currently always returns true for simplicity
    true
}
